#all code (讀檔版本)
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'HW1.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import tkinter
from tkinter import filedialog
from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
import numpy as np
import os
from matplotlib.image import imread
from matplotlib import pyplot as plt
from pyparsing import null_debug_action

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(790, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setEnabled(True)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(45, 180, 110, 60)) #(x,y,寬,長)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect (self.buttonclik_1)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(45, 330, 110,60))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.buttonclik_2)
        self.columnView = QtWidgets.QColumnView(self.centralwidget)
        self.columnView.setGeometry(QtCore.QRect(190, 70, 250, 470))
        self.columnView.setAutoFillBackground(False)
        self.columnView.setIconSize(QtCore.QSize(5, 5))
        self.columnView.setObjectName("columnView")
        self.columnView_2 = QtWidgets.QColumnView(self.centralwidget)
        self.columnView_2.setGeometry(QtCore.QRect(480, 70, 250, 470))
        self.columnView_2.setAutoFillBackground(False)
        self.columnView_2.setIconSize(QtCore.QSize(5, 5))
        self.columnView_2.setObjectName("columnView_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(200, 30, 200, 40))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(490, 30, 200, 40))
        self.label_4.setObjectName("label_4")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(224, 120,185, 60))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.buttonclik_3)
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(224, 220,185, 60))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.buttonclik_4)
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(224, 320,185, 60))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(self.buttonclik_5)
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(224, 420,185, 60))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(self.buttonclik_6)
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(515, 160, 185, 60))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_7.clicked.connect(self.buttonclik_7)
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(515, 260,185, 60))
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_8.clicked.connect(self.buttonclik_8)
        self.pushButton_9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_9.setGeometry(QtCore.QRect(515, 360, 185, 60))
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_9.clicked.connect(self.buttonclik_9)
        self.columnView_2.raise_()
        self.pushButton.raise_()
        self.pushButton_2.raise_()
        self.columnView.raise_()
        self.label_3.raise_()
        self.pushButton_3.raise_()
        self.pushButton_4.raise_()
        self.pushButton_5.raise_()
        self.pushButton_6.raise_()
        self.pushButton_8.raise_()
        self.label_4.raise_()
        self.pushButton_7.raise_()
        self.pushButton_9.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 790, 18))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.file_path_1=''
        self.file_path_2=''
        
    def buttonclik_1(self):
        #os.chdir(r"C:\Users\USER\Desktop\轉雙輔申請資料\Portfolio\影像處理、電腦視覺與深度學習概論(python)\imageprocessing\Hw1_1_F64101032_黃薇庭_V1")
        root = tkinter.Tk()
        root.withdraw()
        self.file_path_1 =filedialog.askopenfilename(parent=root, title='選擇檔案', filetypes=(("選擇檔案","*.jpg"),("all files","*.*")))
        print(self.file_path_1)
    def buttonclik_2(self):
        #os.chdir(r"C:\Users\USER\Desktop\轉雙輔申請資料\Portfolio\影像處理、電腦視覺與深度學習概論(python)\imageprocessing\Hw1_1_F64101032_黃薇庭_V1")
        root = tkinter.Tk()
        root.withdraw()
        self.file_path_2 =filedialog.askopenfilename(parent=root, title='選擇檔案', filetypes=(("選擇檔案","*.jpg"),("all files","*.*")))
        print(self.file_path_2)
    def buttonclik_3(self):
        #root = tkinter.Tk()
        #root.withdraw()
        # file_path_1 =filedialog.askopenfilename(parent=root, title='Load Color Image', filetypes=(("選擇檔案","*.jpg"),("all files","*.*")))
        #os.chdir(r"C:\Users\USER\Desktop\轉雙輔申請資料\Portfolio\影像處理、電腦視覺與深度學習概論(python)\imageprocessing\Hw1_1_F64101032_黃薇庭_V1")
        img = cv2.imread(self.file_path_1)
        b, g, r = cv2.split(img)
        zeros = np.zeros(img.shape[:2], dtype="uint8")
        mergedb = cv2.merge([b, zeros, zeros])
        mergedg = cv2.merge([zeros, g, zeros])
        mergedr = cv2.merge([zeros, zeros, r])
        cv2.imshow('OpenCV', img)
        cv2.imshow('BLUE', mergedb)
        cv2.imshow('GREEN', mergedg)
        cv2.imshow('RED', mergedr)
        cv2.waitKey(0)
    def buttonclik_4(self):
        #root = tkinter.Tk()
        #root.withdraw()
        #file_path_1 =filedialog.askopenfilename(parent=root, title='Load Color Image', filetypes=(("選擇檔案","*.jpg"),("all files","*.*")))
        img = cv2.imread(self.file_path_1)
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        cv2.imshow("OpenCV function", gray)
        gimg = np.zeros((img.shape[0], img.shape[1], 3), np.uint8)  # 建立一幅影像
        for i in range(img.shape[0]):
            for j in range(img.shape[1]):
                gray = (int(img[i, j][0]) + int(img[i, j][1]) + int(img[i, j][2])) / 3
                gimg[i, j] = np.uint8(gray)
        cv2.imshow("Average weighted", gimg)
        cv2.waitKey(0)

    def buttonclik_5(self):
        #root = tkinter.Tk()
        #root.withdraw()
        #file_path_1 =filedialog.askopenfilename(parent=root, title='Load Color Image', filetypes=(("選擇檔案","*.jpg"),("all files","*.*")))
        img = cv2.imread(self.file_path_1)
        imgc=img.copy()
        hsv = cv2.cvtColor(imgc, cv2.COLOR_BGR2HSV)
#####GREEN#####
        lowerg = np.array([40, 50, 20])
        upperg = np.array([80, 255, 255])
        maskg = cv2.inRange(hsv, lowerg, upperg) #(來源影像,色彩最低值,色彩最高值)
        g_masked = cv2.bitwise_and(img, img, mask= maskg)  #交集
        #g_rgb = cv2.cvtColor(g_masked, cv2.COLOR_HSV2BGR)
        ##mask_inv = cv2.bitwise_not(maskg)
        ##mask_rgb = cv2.cvtColor(mask_inv, cv2.COLOR_HSV2BGR)
        cv2.imshow('GREEN', g_masked)
        cv2.imshow('GREENMASK', maskg)
#####WHITE#####
        lowerw = np.array([0 , 0, 200])
        upperw = np.array([180, 20, 255])
        maskw = cv2.inRange(hsv, lowerw, upperw)
        w_masked = cv2.bitwise_and(img, img, mask=maskw)
        #w_rgb = cv2.cvtColor(w_masked, cv2.COLOR_HSV2BGR)
        cv2.imshow('WHITE', w_masked)
        cv2.imshow('WHITEMASK', maskw)
        cv2.waitKey(0)

    def buttonclik_6(self):
        #root = tkinter.Tk()
        #root.withdraw()
        #file_path_1 =filedialog.askopenfilename(parent=root, title='Load Image1', filetypes=(("選擇檔案","*.jpg"),("all files","*.*")))
        img1 = cv2.imread(self.file_path_1)
        #root = tkinter.Tk()
        #root.withdraw()
        #file_path_2 =filedialog.askopenfilename(parent=root, title='Load Image2', filetypes=(("選擇檔案","*.jpg"),("all files","*.*")))
        img2 = cv2.imread(self.file_path_2)
        shape = img1.shape
        img1 = cv2.resize(img1, (shape[1], shape[0]))#cv2.resize(寬*長)np.resize(長*寬)
        img2 = cv2.resize(img2, (shape[1], shape[0]))
        newImg = img1.copy() #不能改原圖
        cv2.namedWindow('Blend')
        cv2.imshow('Blend', img2)
        def blending(weight):
            weight = np.double(weight) / 255.0
            cv2.addWeighted(img1,(1.0 - weight) , img2, weight, 0.0, newImg)
            cv2.imshow('Blend', newImg)
        cv2.createTrackbar('Blend', 'Blend', 0, 255, blending)
                          #('滑桿名稱', '視窗名稱', min, max, fn)
        cv2.setTrackbarPos('Blend', 'Blend', 127)
        cv2.waitKey(0)
    def buttonclik_7(self):
        #root = tkinter.Tk()
        #root.withdraw()
        #file_path_1 =filedialog.askopenfilename(parent=root, title='Load Image', filetypes=(("選擇檔案","*.jpg"),("all files","*.*")))
        img = cv2.imread(self.file_path_1)
        cv2.imshow('gaussian_blur', img)
        def blur(m):
            if m == 0:
                newImg = img
            else:   
                newImg = cv2.GaussianBlur(img, (2 * m + 1, 2 * m + 1), 0, 0)
            cv2.imshow('gaussian_blur', newImg)
        cv2.createTrackbar('magnitude', 'gaussian_blur', 0, 10, blur)
        cv2.waitKey(0)
    def buttonclik_8(self):
        #root = tkinter.Tk()
        #root.withdraw()
        #file_path_1 =filedialog.askopenfilename(parent=root, title='Load Image', filetypes=(("選擇檔案","*.jpg"),("all files","*.*")))
        img = cv2.imread(self.file_path_1)
        cv2.imshow('BilateralFilter', img)
        def blur(m):    
            if m == 0:
                newImg = img
            else:
                newImg = cv2.bilateralFilter(img, 2 * m + 1, 90, 90)
            cv2.imshow('BilateralFilter', newImg)
        cv2.createTrackbar('magnitude', 'BilateralFilter', 0, 10, blur)
        cv2.waitKey(0)
    def buttonclik_9(self):
        #root = tkinter.Tk()
        #root.withdraw()
        #file_path_1 =filedialog.askopenfilename(parent=root, title='Load Image', filetypes=(("選擇檔案","*.jpg"),("all files","*.*")))
        img = cv2.imread(self.file_path_2)
        cv2.imshow('medianBlur', img)
        def blur(m):
            if m == 0:
                newImg = img
                cv2.imshow('medianBlur', newImg)
            else:
                newImg = cv2.medianBlur(img, 2 * m + 1, 0)
                cv2.imshow('medianBlur', newImg)
        cv2.createTrackbar('magnitude', 'medianBlur', 0, 10, blur)
        cv2.waitKey(0)
  
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "HW1_1_F64101032_黃薇庭"))
        self.pushButton.setText(_translate("MainWindow", "LoadImage1"))
        self.pushButton_2.setText(_translate("MainWindow", "LoadImage2"))
        self.label_3.setText(_translate("MainWindow", "1.Image Processing"))
        self.pushButton_3.setText(_translate("MainWindow", "1.1 Color Separation"))
        self.pushButton_4.setText(_translate("MainWindow", "1.2 Color Transformation"))
        self.pushButton_5.setText(_translate("MainWindow", "1.3 Color Detection"))
        self.pushButton_6.setText(_translate("MainWindow", "1.4 Blending"))
        self.label_4.setText(_translate("MainWindow", "2.Image Smoothing"))
        self.pushButton_7.setText(_translate("MainWindow", "2.1 Gaussian blur"))
        self.pushButton_8.setText(_translate("MainWindow", "2.2 Bilateral filter"))
        self.pushButton_9.setText(_translate("MainWindow", "2.3 Median filter"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
