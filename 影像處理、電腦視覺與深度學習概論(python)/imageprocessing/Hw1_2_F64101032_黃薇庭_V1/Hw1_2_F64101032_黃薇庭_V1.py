#all code (讀檔版本)
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'HW1.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import tkinter
from tkinter import filedialog
from tkinter.tix import IMAGETEXT
from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
from cv2 import WINDOW_NORMAL
import math
import numpy as np
import os
from PIL import Image
from matplotlib import pyplot as plt
import matplotlib.image as mpimg
from numpy.core.fromnumeric import size

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(790, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setEnabled(True)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(45, 270, 110, 60)) #(x,y,寬,長)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect (self.buttonclik_1)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(224, 120,185,60))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.buttonclik_2)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(224, 220,185, 60))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.buttonclik_3)
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(224, 320,185, 60))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.buttonclik_4)
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(224, 420,185, 60))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(self.buttonclik_5)
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(515, 120,185, 60))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(self.buttonclik_6)
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(515, 220, 185, 60))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_7.clicked.connect(self.buttonclik_7)
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(515, 320,185, 60))
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_8.clicked.connect(self.buttonclik_8)
        self.pushButton_9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_9.setGeometry(QtCore.QRect(515, 420, 185, 60))
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_9.clicked.connect(self.buttonclik_9)
        self.columnView = QtWidgets.QColumnView(self.centralwidget)
        self.columnView.setGeometry(QtCore.QRect(190, 70, 250, 470))
        self.columnView.setAutoFillBackground(False)
        self.columnView.setIconSize(QtCore.QSize(5, 5))
        self.columnView.setObjectName("columnView")
        self.columnView_2 = QtWidgets.QColumnView(self.centralwidget)
        self.columnView_2.setGeometry(QtCore.QRect(480, 70, 250, 470))
        self.columnView_2.setAutoFillBackground(False)
        self.columnView_2.setIconSize(QtCore.QSize(5, 5))
        self.columnView_2.setObjectName("columnView_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(200, 30, 200, 40))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(490, 30, 200, 40))
        self.label_4.setObjectName("label_4")
        self.columnView.raise_()
        self.columnView_2.raise_()
        self.pushButton.raise_()
        self.pushButton_2.raise_()
        self.pushButton_3.raise_()
        self.pushButton_4.raise_()
        self.pushButton_5.raise_()
        self.pushButton_6.raise_()
        self.pushButton_7.raise_()
        self.pushButton_8.raise_()
        self.pushButton_9.raise_()
        self.label_3.raise_()
        self.label_4.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 790, 18))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.file_path_1=''
        
    def buttonclik_1(self):
        root = tkinter.Tk()
        root.withdraw()
        self.file_path_1 =filedialog.askopenfilename(parent=root, title='選擇檔案', filetypes=(("選擇檔案","*.jpg"),("all files","*.*")))
    def buttonclik_2(self):
        img = mpimg.imread(self.file_path_1) #矩陣 
        #轉成灰度圖，存圖
        img= Image.fromarray(img)#img圖
        #print(img)
        gray=img.convert('L')    
        gray.save('Grayscale.jpg')
        gray.show('Grayscale.jpg')
        #gaussian fliter#矩陣生成
        x,y=np.mgrid[-1:1:3j,-1:1:3j]
        sigma=(1/2)**(1/2) #**次方
        kernel = np.exp(-(x**2+y**2)/(2*sigma*sigma))/(2*np.pi*sigma*sigma)
        #normalize
        kernel=kernel/kernel.sum()
        #convolved
        gray=mpimg.imread('Grayscale.jpg')
        gray=np.array(gray)#轉nparray
        smoothed=np.copy(gray)
        for i in range(1, gray.shape[0] - 1):
            for j in range(1, gray.shape[1] - 1):
                smoothed[i, j] = (gray[i-1:i+2, j-1:j+2]*kernel).sum()
        plt.imshow(smoothed,cmap='gray')
        plt.axis('off')
        plt.show()
        smoothed= Image.fromarray(smoothed)
        smoothed.save('Gaussian Blur.jpg')
        
    def buttonclik_3(self):#soberX
        Filter_soberX=np.array([[-1,0,1],[-2,0,2],[-1,0,1]])
        img = mpimg.imread('Gaussian Blur.jpg') #矩陣 
        soberX=np.zeros(img.shape[:2],dtype=np.uint8)
        for i in range(1,img.shape[0]-1):
            for j in range(1,img.shape[1]-1):
                temp=(img[i-1:i+2, j-1:j+2]*Filter_soberX).sum()
                if temp < 0:
                    temp = 0
                if temp > 255:
                    temp = 255
                soberX[i, j] = temp
        plt.imshow(soberX,cmap='gray')
        plt.axis('off')
        plt.show()
        soberX= Image.fromarray(soberX)
        soberX.save('SoberX.jpg')
        
    def buttonclik_4(self):#soberY
        Filter_soberY=np.array([[1,2,1],[0,0,0],[-1,-2,-1]])
        img = mpimg.imread('Gaussian Blur.jpg') #矩陣 
        soberY=np.zeros(img.shape[:2],dtype=np.uint8)
        for i in range(1,img.shape[0]-1):
            for j in range(1,img.shape[1]-1):
                temp=(img[i-1:i+2, j-1:j+2]*Filter_soberY).sum()
                if temp < 0:
                    temp = 0
                if temp > 255:
                    temp = 255
                soberY[i, j] = temp
        plt.imshow(soberY,cmap='gray')
        plt.axis('off')
        plt.show()
        soberY= Image.fromarray(soberY)
        soberY.save('SoberY.jpg')
        
    def buttonclik_5(self):
        img = mpimg.imread('Gaussian Blur.jpg')
        imgX = mpimg.imread('SoberX.jpg')
        imgX=np.array(imgX)
        imgY = mpimg.imread('SoberY.jpg')
        imgY=np.array(imgY)
        #矩陣 
        magnitude=np.zeros(img.shape[:2],dtype=np.uint8)
        for i in range(1,img.shape[0]-1):
            for j in range(1,img.shape[1]-1):
                magnitude[i, j] =math.sqrt((imgX[i][j]**2+imgY[i][j]**2)/2)        
        plt.imshow(magnitude,cmap='gray')
        plt.axis('off')
        plt.show()
        magnitude= Image.fromarray(magnitude)
        magnitude.save('magnitude.jpg')
 
    def buttonclik_6(self): #4.1ok
        os.chdir(r"C:\Users\USER\Desktop\轉雙輔申請資料\Portfolio\影像處理、電腦視覺與深度學習概論(python)\imageprocessing\Hw1_2_F64101032_黃薇庭_V1")
        cv2.namedWindow('Resized Image',WINDOW_NORMAL)
        cv2.resizeWindow('Resized Image',430,430)
        img=cv2.imread('MIcrosoft.png')
        print("!")
        center=(0,0)  #ppt上說要設108?
        scale=0.5
        angle=0
        resize_img=cv2.warpAffine(img,cv2.getRotationMatrix2D(center,angle,scale),(430,430))
        cv2.imshow('Resized Image',resize_img)
        cv2.imwrite('Resized Image.png',resize_img)
        cv2.waitKey(0)
        cv2.destroyAllWindows()
        
    def buttonclik_7(self): #4.2ok
        cv2.namedWindow('Translation',WINDOW_NORMAL)
        cv2.resizeWindow('Translation',430,430)
        img=cv2.imread('MIcrosoft.png') #[x,y,z(三層互換)]
        center1=(0,0)
        scale1=0.5
        angle1=0
        center2=(430,430)
        scale2=0.5
        angle2=0
        resize_img1=cv2.warpAffine(img,cv2.getRotationMatrix2D(center1,angle1,scale1),(430,430))
        resize_img2=cv2.warpAffine(img,cv2.getRotationMatrix2D(center2,angle2,scale2),(430,430))
        cv2.imshow('Translation',resize_img2+resize_img1)
        allimg=cv2.add(resize_img1,resize_img2) #把數據加在背景圖上
        cv2.imwrite('Translation.png',allimg) #記得副檔名啦
        cv2.waitKey(0)
        cv2.destroyAllWindows()

        
    def buttonclik_8(self):#4.3ok
        cv2.namedWindow('Rotation and Scaling',WINDOW_NORMAL) #記得要先設模式再用resize設值
        cv2.resizeWindow('Rotation and Scaling',430,430) 
        img=cv2.imread('Translation.png') 
        center=(215,215)
        scale=0.5
        angle=45
        resize_img=cv2.warpAffine(img,cv2.getRotationMatrix2D(center,angle,scale),(430,430))
        cv2.imshow('Rotation and Scaling',resize_img)
        cv2.imwrite('Rotation and Scaling.png',resize_img) 
        cv2.waitKey(0)
        cv2.destroyAllWindows()

        
    def buttonclik_9(self):
        cv2.namedWindow('Shearing',WINDOW_NORMAL)
        cv2.resizeWindow('Shearing',430,430)
        img=cv2.imread('Rotation and Scaling.png') #[x,y,z(三層互換)]
        src=np.float32([[50,50],[200,50],[50,200]])
        dst=np.float32([[10,100],[100,50],[100,250]]) 
        M=cv2.getAffineTransform(src,dst)
        resize_img=cv2.warpAffine(img,M,(430,430))
        center=(215,215)
        scale=1
        angle=0
        resize_img=cv2.warpAffine(resize_img,cv2.getRotationMatrix2D(center,angle,scale),(430,430))
        cv2.imshow('Shearing',resize_img)
        cv2.imwrite('Shearing.png',resize_img)
        cv2.waitKey(0)
        cv2.destroyAllWindows()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Hw1_2_F64101032_黃薇庭"))
        self.pushButton.setText(_translate("MainWindow", "LoadImage"))
        self.pushButton_2.setText(_translate("MainWindow","3.1 Gaussian Blur"))
        self.pushButton_3.setText(_translate("MainWindow", "3.2 Sobel X"))
        self.pushButton_4.setText(_translate("MainWindow", "3.3 Sobel Y"))
        self.pushButton_5.setText(_translate("MainWindow", "3.4 Magnitude"))
        self.pushButton_6.setText(_translate("MainWindow", "4.1 Resize"))
        self.pushButton_7.setText(_translate("MainWindow", "4.2 Translation"))
        self.pushButton_8.setText(_translate("MainWindow", "4.3 Rotation, Scaling "))
        self.pushButton_9.setText(_translate("MainWindow", "4.4 Shearing"))
        self.label_3.setText(_translate("MainWindow", "3. Edge Detection"))
        self.label_4.setText(_translate("MainWindow", "4. Transforms"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
